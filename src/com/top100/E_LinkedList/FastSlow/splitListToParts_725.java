package com.top100.E_LinkedList.FastSlow;

/*
 * 【题目】
 *      给定一个头结点为 root 的链表, 编写一个函数以将链表分隔为 k 个连续的部分。
 *      每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。
 *      这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。
 *      返回一个符合上述规则的链表的列表。
 * 【例题】
 *      输入:  root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
 *      输出:  [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
 *      解释:  输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。
 * 【思路】
 */
public class splitListToParts_725
{
}
