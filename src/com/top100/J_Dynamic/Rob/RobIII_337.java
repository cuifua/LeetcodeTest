package com.top100.J_Dynamic.Rob;

import com.top100.F_Tree.TreeNode;

/*
【题目】
    在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。
    这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。
    一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。
    计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。

【示例】
    输入: [3,2,3,null,3,null,1]

         3
        / \
       2   3
        \   \
         3   1

    输出: 7
    解释:小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.

【示例】
    输入: [3,4,5,1,3,null,1]
        3
        / \
       4   5
      / \   \
     1   3   1

    输出: 9
    解释:小偷一晚能够盗取的最高金额= 4 + 5 = 9.
 */
public class RobIII_337
{
    public int rob(TreeNode root)
    {
        int[] dp = dfs(root);
        return Math.max(dp[0],dp[1] );
    }

    public int[] dfs(TreeNode node)
    {
        if(node == null)  return new int[]{0,0};

        int[] left = dfs(node.left);
        int[] right = dfs(node.right);

        int[] cur = new int[2];//0不偷，1偷
        cur[0] = Math.max(left[0],left[1]) + Math.max(right[0],right[1]);//不偷：Max(左孩子不偷，左孩子偷) + Max(右孩子不偷，右孩子偷)
        cur[1] = node.val + left[0] + right[0];// 偷：左孩子不偷+ 右孩子不偷 + 当前节点偷

        return cur;
    }
}
