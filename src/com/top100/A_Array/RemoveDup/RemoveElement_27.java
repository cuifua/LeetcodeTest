package com.top100.A_Array.RemoveDup;
/*
【题目】
     给你一个数组 nums和一个值 val，你需要 原地 移除所有数值等于val的元素，并返回移除后数组的新长度。
     不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
     元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
【例题】
     输入：nums = [3,2,2,3], val = 3
     输出：2, nums = [2,2]
     解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。
         例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。

     输入：nums = [0,1,2,2,3,0,4,2], val = 2
     输出：5, nums = [0,1,4,0,3]
     解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。
          注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。

 【思路】
     先设定变量 idx，指向待插入位置。idx 初始值为 0
     然后从题目的「要求/保留逻辑」出发，来决定当遍历到任意元素 x 时，应该做何种决策：
       如果当前元素 x 与移除元素 val 相同，那么跳过该元素。
       如果当前元素 x 与移除元素 val 不同，那么我们将其放到下标 idx 的位置，并让 idx 自增右移。
     最终得到的 idx 即是答案。
 */
public class RemoveElement_27
{
    public  int remove (int[] nums , int val)
    {
        int index = 0;
        for(int num : nums)
        {
            if(num != val)
                nums[index++] = num;
        }
        return index;
    }
}


